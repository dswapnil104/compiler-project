program : directives global funclist

directives : '#include<' IDENTIFIER '>' directives | NULL

global : declaration_statement global | assignment_statement global | NULL

funclist : func funclist | NULL

func : return_type funcname '(' argument_list ')' '{' statements '}'

argument_list : type argument_name | type argument_name ',' argument_list | NULL

type : INT | FLOAT

return_type : type | VOID

funcname : IDENTIFIER

argument_name : IDENTIFIER

statements : declaration_statement statements
             | assignment_statement statements
             | conditional_statement statements
             | iteration_statement statements
             | NULL

declaration_statement : type variable_list ';'

variable_list : variable | variable ',' variable_list

assignment_statement : variable ':=' expression ';'
                     | variable '+=' expression ';'
                     | variable '-=' expression ';' 
                     | variable '*=' expression ';'
                     | variable '/=' expression ';'

conditional_statement : 'if' '(' conditional_expression ')' '{' statements '}'
                      | 'if' '(' conditional_expression ')' '{' statements '}' else_if_list

else_if_list : 'else' 'if' '(' conditional_expression ')' '{' statements '}' else_if_list
                | 'else' '{' statements '}'
                | NULL

iteration_statement : for_loop | while_loop

for_loop : 'for' '(' for_declaration_statement  conditional_expression ';' assignment_statement ')' '{' statements '}'

for_declaration_statement : declaration_statement |  ';'

while_loop : 'while' '(' conditional_expression ')' '{' statements '}'

expression : arithmetic_expression
           | logical_expression
           | conditional_expression

arithmetic_expression : arithmetic_expression '+' term
                      | arithmetic_expression '-' term
                      | term

term : term '*' factor
     | term '/' factor
     | factor

factor : ( arithmetic_expression )
       | IDENTIFIER
       | CONSTANT

conditional_expression : arithmetic_expression compare arithmetic_expression
                       | true
                       | false

compare : > | >= | = | < | <=

logical_expression : logical_expression '&' logical_expression
                   | logical_expression '|' logical_expression
                   | conditional_expression 
